[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –º–∞—Ç—Ä–∏—Ü—ã, —Ç–µ–Ω–∑–æ—Ä—ã.",
    "section": "",
    "text": "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è, –º–∞—Ç—Ä–∏—Ü—ã, —Ç–µ–Ω–∑–æ—Ä—ã.\n–í –∫—É—Ä—Å–µ –∏–∑—É—á–∞—é—Ç—Å—è –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å—é–∂–µ—Ç–æ–≤ –≤ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏. –ú–µ—Ç–æ–¥—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ª–µ–∂–∞—Ç –≤ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏—è –º–Ω–æ–≥–∏—Ö –∑–∞–¥–∞—á –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫. –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á—É –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–µ—à–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∫–∞–∫–æ–π-—Ç–æ –º–æ–¥–µ–ª–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ –¥–∞–Ω–Ω—ã–º, –ø—Ä–∏—á—ë–º –æ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ—à–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –∑–∞–¥–∞—á–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å —Å–∞–º–æ–≥–æ –º–µ—Ç–æ–¥–∞ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è. –î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –ø–æ—Å–≤—è—â–µ–Ω –∏–∑—É—á–µ–Ω–∏—é –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ –Ω–µ–≤—ã–ø—É–∫–ª—ã—Ö), –∞ —Ç–∞–∫–∂–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —ç—Ç–∏—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –∑–∞–¥–∞—á–∞—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –≤–æ–∑–Ω–∏–∫–∞—é—â–∏—Ö –≤ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏. –û—Å–Ω–æ–≤–Ω–æ–π –∞–∫—Ü–µ–Ω—Ç –≤ –∏–∑–ª–æ–∂–µ–Ω–∏–∏ –¥–µ–ª–∞–µ—Ç—Å—è –Ω–∞ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤. –¶–µ–ª—å—é –∫—É—Ä—Å–∞ —è–≤–ª—è–µ—Ç—Å—è –≤—ã—Ä–∞–±–æ—Ç–∫–∞ —É —Å–ª—É—à–∞—Ç–µ–ª–µ–π –Ω–∞–≤—ã–∫–æ–≤ –ø–æ –ø–æ–¥–±–æ—Ä—É –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–µ—Ç–æ–¥–∞ –¥–ª—è —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏, –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–Ω–æ —É—á–∏—Ç—ã–≤–∞—é—â–µ–≥–æ –µ—ë –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏.\n–ö—É—Ä—Å —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 10 –∑–∞–Ω—è—Ç–∏–π –ø–æ 3 —á–∞—Å–∞. –ö–∞–∂–¥–æ–µ —Ç—Ä–µ—Ö—á–∞—Å–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–µ–ª–∏—Ç—Å—è –Ω–∞ —Å–∞–º–æ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–µ –±–ª–æ–∫–∏ –ø–æ 1-1.5 —á–∞—Å–∞, –≤ —Ä–∞–º–∫–∞—Ö –∫–æ—Ç–æ—Ä—ã—Ö –∏–∑–ª–∞–≥–∞–µ—Ç—Å—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–∏–º–µ—Ä—ã —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á –ø–æ —Ç–µ–º–µ, –∞ —Ç–∞–∫ –∂–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ —Ç–µ–º–µ. –£—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–∞–∫—Ç–∏–∫—É–º–∞—Ö –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫—É—Ä—Å–∞.\n\nüß† –°–ª—É—à–∞—Ç–µ–ª–∏\nüìß –ß–∞—Ç\nüë®‚Äçüíª Github\n\n–ú–∞–π, 2024 –≥."
  },
  {
    "objectID": "students.html",
    "href": "students.html",
    "title": "",
    "section": "",
    "text": "–î–µ—Ä–∑–Ω—É–≤—à–∏–π –∑–Ω–∞—Ç—å\n–ü–∞–ø–∫–∞ —Å –¥–æ–º–∞—à–∫–∞–º–∏\n–ó–∞—á–µ—Ç\n\n\n\n\n–ê–º–∏–Ω–æ–≤ –¢–∏–º—É—Ä –í–µ–Ω–µ—Ä–æ–≤–∏—á\nüìÅ\n\n\n\n–ë–µ—Ä–µ–∑–∫–∏–Ω –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á\nüìÅ\n\n\n\n–ë–æ—Ä–æ–¥—É–ª–∏–Ω–∞ –ê–Ω–∞—Å—Ç–∞—Å–∏—è –î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞\nüìÅ\n\n\n\n–ì–æ–ª–æ—Ö–æ–≤ –ï–≤–≥–µ–Ω–∏–π –ò–≥–æ—Ä–µ–≤–∏—á\nüìÅ\n\n\n\n–ò–ª—å–∏–Ω –ò–≥–æ—Ä—å –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\nüìÅ\n\n\n\n–ò—Å–º–∞–∏–ª–æ–≤ –†—É—Å–ª–∞–Ω –≠–ª—å–¥–∞—Ä–æ–≤–∏—á\nüìÅ\n\n\n\n–ü–∞—à–∫–æ–≤–∞ –Ø–Ω–∞ –ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞\nüìÅ\n\n\n\n–ö—Ä—É–ø–µ–Ω—á–µ–Ω–∫–æ–≤ –ì–µ–æ—Ä–≥–∏–π –ü–µ—Ç—Ä–æ–≤–∏—á\nüìÅ\n\n\n\n–ú–∞–ª—å–∫–∏–≤ –†–æ–º–∞–Ω\nüìÅ\n\n\n\n–ù–æ–≤–æ—Å–µ–ª–æ–≤–∞ –ü–æ–ª–∏–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\nüìÅ\n\n\n\n–°–º–∏—Ä–Ω–æ–≤ –°–µ—Ä–≥–µ–π –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–∏—á\nüìÅ\n\n\n\n–¢–∞–ª–∞–ª–∞–π –ú–∏—Ö–∞–∏–ª –ì–µ–æ—Ä–≥–∏–µ–≤–∏—á\nüìÅ\n\n\n\n–¢—É–º–∞–Ω–æ–≤ –ì–ª–µ–± –ê–Ω–∞—Ç–æ–ª—å–µ–≤–∏—á\nüìÅ\n\n\n\n–ß–µ—Ä–∫–∞—Å–æ–≤–∞ –ñ–∞–Ω–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞\nüìÅ\n\n\n\n–≠—Ñ–µ–Ω–¥–∏–µ–≤ –ú–∞—Ö–º—É–¥ –ú–∞–ª–∏–∫–æ–≤–∏—á\nüìÅ\n\n\n\n–í–æ–ª–∫–æ–≤ –ê–Ω—Ç–æ–Ω –í–∞–¥–∏–º–æ–≤–∏—á\nüìÅ\n\n\n\n\n‚úÖ - –ó–∞—á–µ—Ç\nüíé - –ó–∞—á–µ—Ç —Å –æ—Ç–ª–∏—á–∏–µ–º"
  },
  {
    "objectID": "program.html",
    "href": "program.html",
    "title": "",
    "section": "",
    "text": "–ó–∞–Ω—è—Ç–∏–µ 1  ‚Ä¢  üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã  ‚Ä¢  üìù –ó–∞–ø–∏—Å–∏\n\n\n\n\n–û–±–∑–æ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–∞–Ω–æ–≤–æ–∫ –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n–ó–∞–¥–∞—á–∞ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º–∏—Ä–Ω–æ–≥–æ –±–∞–Ω–∫–∞. üêç code \n\n\n–í–≤–µ–¥–µ–Ω–∏–µ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É CVXPY\n–ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π CVXPY üêç code \n\n\n–í–≤–µ–¥–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä—ã, –º–∞—Ç—Ä–∏—Ü—ã, —Ç–µ–Ω–∑–æ—Ä—ã\n–ü—Ä–æ—Å—Ç—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –º–∞—Ç—Ä–∏—Ü–∞–º–∏. üêç code \n\n\n\n\n–ó–∞–Ω—è—Ç–∏–µ 2 ‚Ä¢ üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ üìù –ó–∞–ø–∏—Å–∏\n\n\n\n–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã. –°–∏–Ω–≥—É–ª—è—Ä–Ω—ã–µ —á–∏—Å–ª–∞ –º–∞—Ç—Ä–∏—Ü—ã.\n–ó–∞–¥–∞—á–∞ PageRank –∫–∞–∫ –ø–æ–∏—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ –º–∞—Ç—Ä–∏—Ü—ã –ø–µ—Ä–µ—Ö–æ–¥–Ω—ã—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –≥—Ä–∞—Ñ–∞. üêç code \n\n\n–ú–∞—Ç—Ä–∏—á–Ω—ã–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏—è: SVD, Skeleton. –ö–∞–Ω–æ–Ω–∏—á–µ—Å–∫–æ–µ —Ä–∞–∑–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–Ω–∑–æ—Ä–∞.\n–°–∂–∞—Ç–∏–µ —Å–ª–æ–µ–≤ –≤ –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç—è—Ö —Å –ø–æ–º–æ—â—å—é Skeleton. üêç code \n\n\n–ú–µ—Ç–æ–¥ –≥–ª–∞–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç\nEigenfaces. üêç code \n\n\n\n\n\n–ó–∞–Ω—è—Ç–∏–µ 3 ‚Ä¢ üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ üìù –ó–∞–ø–∏—Å–∏\n\n\n\n–ú–∞—Ç—Ä–∏—á–Ω–æ-–≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ.\n–ó–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ –º–∞—Ç—Ä–∏—Ü–∞–º/–≤–µ–∫—Ç–æ—Ä–∞–º. üêç code \n\n\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ.\n–ó–∞–¥–∞—á–∏ –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏–µ. üêç code \n\n\n–ò–¥–µ—è —á–µ–∫–ø–æ–∏–Ω—Ç–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –ø–∞–º—è—Ç–∏\n–ó–∞–ø–∏—Ö–Ω–µ–º –≤ GPU RAM —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä —Å –±–æ–ª—å—à–∏–º –±–∞—Ç—á–µ–º —Å –ø–æ–º–æ—â—å—é —á–µ–∫–ø–æ–∏–Ω—Ç–∏–Ω–≥–∞. üêç code \n\n\n\n\n\n–ó–∞–Ω—è—Ç–∏–µ 4 ‚Ä¢ üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ üìù –ó–∞–ø–∏—Å–∏\n\n\n\n–í—ã–ø—É–∫–ª–æ—Å—Ç—å. –í—ã–ø—É–∫–ª—ã–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞.\n üêç code \n\n\n–í—ã–ø—É–∫–ª—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏. –°–∏–ª—å–Ω–æ –≤—ã–ø—É–∫–ª—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.\n–ó–∞–¥–∞—á–∏ –Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –ø–æ –º–∞—Ç—Ä–∏—Ü–∞–º/–≤–µ–∫—Ç–æ—Ä–∞–º. üêç code \n\n\n\n\n\n–ó–∞–Ω—è—Ç–∏–µ 5 ‚Ä¢ üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ üìù –ó–∞–ø–∏—Å–∏\n\n\n\n–ü–æ—Ä—Ç—Ñ–µ–ª—å–Ω–∞—è —Ç–µ–æ—Ä–∏—è –ú–∞—Ä–∫–æ–≤–∏—Ü–∞.\n–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ñ–æ–Ω–¥–æ–≤–æ–≥–æ —Ä—ã–Ω–∫–∞. üêç code \n\n\n–£—Å–ª–æ–≤–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏: –±–µ–∑—É—Å–ª–æ–≤–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Ç–∏–ø–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤.\n–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞–∏–º–µ–Ω—å—à–∏—Ö –∫–≤–∞–¥—Ä–∞—Ç–æ–≤. üêç code \n\n\n–£—Å–ª–æ–≤–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ—Å—Ç–∏: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ —Ç–∏–ø–∞ –Ω–µ—Ä–∞–≤–µ–Ω—Å—Ç–≤. –£—Å–ª–æ–≤–∏—è –ö–∞—Ä—É—à–∞-–ö—É–Ω–∞-–¢–∞–∫–∫–µ—Ä–∞\n–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏. üêç code \n\n\n\n\n\n–ó–∞–Ω—è—Ç–∏–µ 6 ‚Ä¢ üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ üìù –ó–∞–ø–∏—Å–∏\n\n\n\n–ó–∞–¥–∞—á–∞ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–µ–π—à–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ TED –≤–∏–¥–µ–æ—Ä–æ–ª–∏–∫–æ–≤ –∫–∞–∫ –∑–∞–¥–∞—á–∞ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ü—Ä–∞–∫—Ç–∏–∫–∞ —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π pulp. üêç code \n\n\n–°–∏–º–ø–ª–µ–∫—Å –º–µ—Ç–æ–¥.\n–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –∫–∞–∫ –∑–∞–¥–∞—á–∞ –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ PyOMO. üêç code \n\n\n–í–≤–µ–¥–µ–Ω–∏–µ –≤ Mixed Integer Programming.\n–†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –æ —Ä—é–∫–∑–∞–∫–µ –∏ –æ —Ä–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ—Ä–æ–ª–µ–≤ –Ω–∞ —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–µ. üêç code \n\n\n\n\n\n–ó–∞–Ω—è—Ç–∏–µ 7 ‚Ä¢ üìÑ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Ä¢ üìù –ó–∞–ø–∏—Å–∏\n\n\n\n–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö –∏ –∑–∞–¥–∞—á–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.\n–ü–æ–¥–±–æ—Ä –≥–∏–ø–µ—Ä–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –≤ Keras —Å –ø–æ–º–æ—â—å—é Optuna. üêç code \n\n\n–õ–∏–Ω–µ–π–Ω—ã–π –ø–æ–∏—Å–∫.\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ª–∏–Ω–µ–π–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –¥–ª—è –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω–æ–≥–æ —Å–ø—É—Å–∫–∞. üêç code \n\n\n–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Å–ø—É—Å–∫ –∏ —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã - –º–µ—Ç–æ–¥ —Ç—è–∂–µ–ª–æ–≥–æ —à–∞—Ä–∏–∫–∞. –£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –ù–µ—Å—Ç–µ—Ä–æ–≤–∞.\n–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –≤ –∑–∞–¥–∞—á–µ –±–∏–Ω–∞—Ä–Ω–æ–π –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏. üêç code \n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "files/mds.html",
    "href": "files/mds.html",
    "title": "",
    "section": "",
    "text": "!pip install -q geopy\n\n\n[notice] A new release of pip is available: 23.2.1 -&gt; 23.3.2\n[notice] To update, run: python3.9 -m pip install --upgrade pip\n\n\n\nimport numpy as np\nfrom geopy.distance import geodesic\n\n# Estimated GPS coordinates for the specified Moscow Metro stations\n# Format: \"Station Name\": (Latitude, Longitude)\nstations_coordinates = {\n    \"Fizteh\": (55.5518, 37.3247),           # Estimated coordinates for Fizteh\n    \"Chkalovskaya\": (55.4523, 37.3926),\n    \"Slavyanski Boulevard\": (55.4347, 37.2814),\n    \"Park Kultury\": (55.4409, 37.3529),\n    \"Komsomolskaya\": (55.4629, 37.3918),\n    \"Yugo-Zapadnaya\": (55.3949, 37.2900),\n    \"Kievskaya\": (55.4440, 37.3356),\n    \"Strogino\": (55.4814, 37.2411),\n    \"Konkovo\": (55.3800, 37.3108),\n    \"VDNKh\": (55.4916, 37.3828),\n    \"Tekstilshiki\": (55.4232, 37.4354)\n}\n\n# Calculate the pairwise distance matrix\ndef calculate_distance_matrix(coords_dict):\n    station_names = list(coords_dict.keys())\n    n_stations = len(station_names)\n    distance_matrix = np.zeros((n_stations, n_stations))\n\n    for i in range(n_stations):\n        for j in range(n_stations):\n            if i != j:\n                distance_matrix[i][j] = geodesic(coords_dict[station_names[i]], coords_dict[station_names[j]]).kilometers\n            else:\n                distance_matrix[i][j] = 0\n\n    return station_names, distance_matrix\n\nstation_names, distance_matrix = calculate_distance_matrix(stations_coordinates)\ndistance_matrix, station_names\n\n\n(array([[ 0.        , 11.8795683 , 13.32121955, 12.47476534, 10.76730899,\n         17.60531703, 12.02141556,  9.45093857, 19.14704757,  7.64111262,\n         15.93607716],\n        [11.8795683 ,  0.        ,  7.30513134,  2.81466242,  1.18120326,\n          9.11269391,  3.72338261, 10.11508331,  9.57219188,  4.41903113,\n          4.22314047],\n        [13.32121955,  7.30513134,  0.        ,  4.57796148,  7.6589319 ,\n          4.46432896,  3.58332329,  5.79065187,  6.36819994,  9.01496207,\n          9.83338314],\n        [12.47476534,  2.81466242,  4.57796148,  0.        ,  3.47233987,\n          6.48795948,  1.14799012,  8.3873321 ,  7.28559471,  5.95292621,\n          5.58202776],\n        [10.76730899,  1.18120326,  7.6589319 ,  3.47233987,  0.        ,\n          9.94233619,  4.13173454,  9.75035755, 10.55879981,  3.24552038,\n          5.21047455],\n        [17.60531703,  9.11269391,  4.46432896,  6.48795948,  9.94233619,\n          0.        ,  6.18218626, 10.11534229,  2.11882318, 12.26352411,\n          9.73385562],\n        [12.02141556,  3.72338261,  3.58332329,  1.14799012,  4.13173454,\n          6.18218626,  0.        ,  7.28489644,  7.29627254,  6.08240265,\n          6.72859259],\n        [ 9.45093857, 10.11508331,  5.79065187,  8.3873321 ,  9.75035755,\n         10.11534229,  7.28489644,  0.        , 12.12071314,  9.02961058,\n         13.89681105],\n        [19.14704757,  9.57219188,  6.36819994,  7.28559471, 10.55879981,\n          2.11882318,  7.29627254, 12.12071314,  0.        , 13.23410172,\n          9.24357874],\n        [ 7.64111262,  4.41903113,  9.01496207,  5.95292621,  3.24552038,\n         12.26352411,  6.08240265,  9.02961058, 13.23410172,  0.        ,\n          8.31043471],\n        [15.93607716,  4.22314047,  9.83338314,  5.58202776,  5.21047455,\n          9.73385562,  6.72859259, 13.89681105,  9.24357874,  8.31043471,\n          0.        ]]),\n ['Fizteh',\n  'Chkalovskaya',\n  'Slavyanski Boulevard',\n  'Park Kultury',\n  'Komsomolskaya',\n  'Yugo-Zapadnaya',\n  'Kievskaya',\n  'Strogino',\n  'Konkovo',\n  'VDNKh',\n  'Tekstilshiki'])\n\n\n\nimport matplotlib.pyplot as plt\n\ndef gradient_descent_mds(D, dimensions=2, learning_rate=0.01, iterations=1000):\n    \"\"\"\n    Perform Multidimensional Scaling using Gradient Descent.\n\n    :param D: NxN distance matrix.\n    :param dimensions: Number of dimensions for the output coordinates.\n    :param learning_rate: Learning rate for gradient descent.\n    :param iterations: Number of iterations.\n    :return: Nx2 matrix of coordinates.\n    \"\"\"\n    N = D.shape[0]\n    # Random initialization of coordinates\n    X = np.random.rand(N, dimensions)\n\n    for iteration in range(iterations):\n        # Compute distance matrix for current coordinates\n        D_hat = np.sqrt(np.sum((X[:, np.newaxis, :] - X[np.newaxis, :, :]) ** 2, axis=2))\n\n        # Compute gradient\n        delta = D_hat - D\n        for i in range(N):\n            for j in range(N):\n                if i != j:\n                    grad = (delta[i, j] / D_hat[i, j]) * (X[i, :] - X[j, :])\n                    X[i, :] -= learning_rate * grad\n\n    return X\n\n# Perform MDS\ncoordinates_mds = gradient_descent_mds(distance_matrix)\n\n# Plotting the results\nplt.figure(figsize=(10, 8))\nplt.scatter(coordinates_mds[:, 0], coordinates_mds[:, 1])\nfor i, name in enumerate(station_names):\n    plt.annotate(name, (coordinates_mds[i, 0], coordinates_mds[i, 1]))\nplt.title(\"2D Representation of Moscow Metro Stations using MDS\")\nplt.xlabel(\"X Coordinate\")\nplt.ylabel(\"Y Coordinate\")\nplt.grid(True)\nplt.show()\n\n\n\n\n\n\n\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.animation as animation\nfrom geopy.distance import geodesic\n\n# Estimated GPS coordinates for the specified Moscow Metro stations\nstations_coordinates = {\n    \"Fizteh\": (55.5518, 37.3247),\n    \"Chkalovskaya\": (55.4523, 37.3926),\n    \"Slavyanski Boulevard\": (55.4347, 37.2814),\n    \"Park Kultury\": (55.4409, 37.3529),\n    \"Komsomolskaya\": (55.4629, 37.3918),\n    \"Yugo-Zapadnaya\": (55.3949, 37.2900),\n    \"Kievskaya\": (55.4440, 37.3356),\n    \"Strogino\": (55.4814, 37.2411),\n    \"Konkovo\": (55.3800, 37.3108),\n    \"VDNKh\": (55.4916, 37.3828),\n    \"Tekstilshiki\": (55.4232, 37.4354)\n}\n\n# Calculate the pairwise distance matrix\ndef calculate_distance_matrix(coords_dict):\n    station_names = list(coords_dict.keys())\n    n_stations = len(station_names)\n    distance_matrix = np.zeros((n_stations, n_stations))\n\n    for i in range(n_stations):\n        for j in range(n_stations):\n            if i != j:\n                distance_matrix[i][j] = geodesic(coords_dict[station_names[i]], coords_dict[station_names[j]]).kilometers\n            else:\n                distance_matrix[i][j] = 0\n\n    return station_names, distance_matrix\n\nstation_names, distance_matrix = calculate_distance_matrix(stations_coordinates)\n\n# Gradient Descent MDS with data collection for animation\ndef gradient_descent_mds(D, dimensions=2, learning_rate=0.01, iterations=1000):\n    N = D.shape[0]\n    X = np.random.rand(N, dimensions)\n\n    # Records for animation\n    positions_record = []\n    loss_record = []\n\n    for iteration in range(iterations):\n        D_hat = np.sqrt(np.sum((X[:, np.newaxis, :] - X[np.newaxis, :, :]) ** 2, axis=2))\n        delta = D_hat - D\n        loss = np.sum(delta**2)  # Loss calculation\n        positions_record.append(X.copy())\n        loss_record.append(loss)\n\n        # Gradient descent update\n        for i in range(N):\n            for j in range(N):\n                if i != j:\n                    grad = (delta[i, j] / D_hat[i, j]) * (X[i, :] - X[j, :])\n                    X[i, :] -= learning_rate * grad\n\n    return positions_record, loss_record\n\n# Perform MDS and collect data for animation\npositions_record, loss_record = gradient_descent_mds(distance_matrix, iterations=100)\n\n# Function to update each frame in the animation\ndef update_frame(num, positions_record, loss_record, station_names, scat, line, ax1, ax2):\n    # Clear previous station labels and tails\n    ax1.clear()\n    ax1.set_xlim(-10, 10)\n    ax1.set_ylim(-10, 10)\n    ax1.set_title('Station Positions')\n    ax1.set_xlabel('X Coordinate')\n    ax1.set_ylabel('Y Coordinate')\n\n    # Update station positions and draw tails\n    scat.set_offsets(positions_record[num])\n    for i, name in enumerate(station_names):\n        # Draw the tail for each station\n        if num &gt; 0:\n            for past in range(num):\n                ax1.plot([positions_record[past][i, 0], positions_record[past+1][i, 0]],\n                         [positions_record[past][i, 1], positions_record[past+1][i, 1]],\n                         color='gray', alpha=0.5)\n\n        # Label the final position of the station\n        if num == len(positions_record) - 1:\n            ax1.text(positions_record[num][i, 0], positions_record[num][i, 1], name, fontsize=8)\n\n    # Update loss evolution plot\n    line.set_data(range(num + 1), loss_record[:num + 1])\n    ax2.set_xlim(0, 100)\n    ax2.set_ylim(min(loss_record), max(loss_record))\n    ax2.set_title('Loss Evolution')\n    ax2.set_xlabel('Iteration')\n    ax2.set_ylabel('Loss')\n\n    return scat, line\n\n# Create the figure for animation\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6))\n\n# Scatter plot for station positions\nscat = ax1.scatter([], [], s=30)\nax1.set_xlim(-10, 10)\nax1.set_ylim(-10, 10)\nax1.set_title('Station Positions')\nax1.set_xlabel('X Coordinate')\nax1.set_ylabel('Y Coordinate')\n\n# Line plot for loss evolution\nline, = ax2.semilogy([], [], lw=2)\nax2.set_xlim(0, 100)\nax2.set_ylim(min(loss_record), max(loss_record))\nax2.set_title('Loss Evolution')\nax2.set_xlabel('Iteration')\nax2.set_ylabel('Loss')\n\n# Creating the animation\nani = animation.FuncAnimation(fig, update_frame, frames=100, fargs=(positions_record, loss_record, station_names, scat, line, ax1, ax2), blit=False, repeat=False)\n\n# Saving the animation\nani.save('moscow_metro_mds_animation.mp4', writer='ffmpeg', fps=10)\n\n\n\n\n\n\n\n\n\npositions_record[-1]\n\narray([[ 8.02981262,  8.63001461],\n       [ 2.25518938, -2.67734712],\n       [-3.33834951,  1.74376926],\n       [-0.07801013, -1.44497825],\n       [ 3.09715112, -2.01602395],\n       [-6.46246911, -1.07594008],\n       [-0.48882653, -0.35399986],\n       [-1.32473107,  7.16441546],\n       [-6.86842661, -3.2663034 ],\n       [ 5.7281098 ,  1.15859194],\n       [ 4.50067386, -4.182293  ]])\n\n\n\nnp.max()\n\n100"
  }
]